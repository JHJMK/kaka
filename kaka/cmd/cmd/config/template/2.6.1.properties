# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id={{ .BrokerId }}

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092

listeners=PLAINTEXT://{{ .NodeIp }}:9092


# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
# advertised.listeners=PLAINTEXT://107.150.107.220:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads={{ index .Params "num.network.threads" | default 3 }}

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads={{ index .Params "num.io.threads" | default 8 }}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs={{ .LogDir }}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions={{ index .Params "num.partitions" | default 3 }}

# 默认分区数
default.replication.factor={{ index .Params "default.replication.factor" | default 3}}

# 是否自动创建topic
auto.create.topics.enable={{ index .Params "auto.create.topics.enable" | default false }}

message.max.bytes={{ index .Params "message.max.bytes" | default 1000000 }}

# 自动负载均衡
auto.leader.rebalance.enable={{ index .Params "auto.leader.rebalance.enable" | default true }}

# 允许删除topic
delete.topic.enable={{ index .Params "delete.topic.enable" | default true }}

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor=3
transaction.state.log.replication.factor=3
transaction.state.log.min.isr=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
log.flush.interval.messages=20000

# The maximum amount of time a message can sit in a log before we force a flush
log.flush.interval.ms=10000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.ms={{ index .Params "log.retention.ms" | default 259200000 }}

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
log.retention.bytes={{ index .Params "log.retention.bytes" | default -1}}

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={{ .ZookeeperConnect }}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000

zookeeper.session.timeout.ms=30000

zookeeper.sync.time.ms=2000

############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=0

############################# Replica Basics #############################

# leader接收follower的"fetch请求"的超时时间
replica.lag.time.max.ms=10000

# follower落后于leader的最大message数
replica.lag.max.messages=4000

# follower与leader之间的socket超时时间
replica.socket.timeout.ms=30000

# follower每次fetch数据的最大尺寸
replica.fetch.max.bytes={{ index .Params "replica.fetch.max.bytes" | default 1048576 }}

# follower的fetch请求超时重发时间
replica.fetch.wait.max.ms=500

# fetch的最小数据尺寸
replica.fetch.min.bytes=1

# follower中开启的fetcher线程数, 同步速度与系统负载均衡
num.replica.fetchers=2

# partition leader与replicas之间通讯时,socket的超时时间
#controller.socket.timeout.ms=30000

# partition leader与replicas数据同步时,消息的队列尺寸.
#controller.message.queue.size=10
log.cleanup.policy={{ index .Params "log.cleanup.policy" | default "delete" }}

# 当生产者将 request.required.acks 设置为 -1 时，min.insync.replicas 指定必须确认写入才能被视为成功的最小副本数。
# 如果无法满足此最小值，则生产者将引发异常（NotEnoughReplicas 或 NotEnoughReplicasAfterAppend）。
# 当一起使用时，min.insync.replicas 和 request.required.acks 允许您强制执行更高的持久性保证。
# 典型的场景是创建一个复制因子为 3 的主题，将 min.insync.replicas 设置为 2，并使用 request.required.acks 为 -1 进行生成。这将确保生产者在大多数副本未收到写入时引发异常。
min.insync.replicas={{ index .Params "min.insync.replicas" | default 1}}

# 指示是否将不在 ISR 集中的副本作为最后手段选举为领导者，即使这样做可能会导致数据丢失。
unclean.leader.election.enable={{ index .Params "unclean.leader.election.enable" | default false}}
